##################################################################################
##################################################################################
			##### PRÁCTICA FINAL #####
			ANALIZADOR DE FICHEROS CSS
		Alan Xes López Fernández y Iván Pérez Longa
##################################################################################
INDICE
1.) INTRODUCCIÓN
2.) MANUAL DE USUARIO
3.) MANUAL TÉCNICO
	3.1) ANALIZADOR LÉXICO
	3.2) ANALIZADOR SINTÁCTICO
4.) TRABAJO A FUTURO
5.) INCIDENTES
6.) CONCLUSIÓN		
##################################################################################
1.) INTRODUCCIÓN

Este archivo documenta el desarrollo del proyecto llevado a cabo por Alan e Iván.
Este proyecto consiste en la creación de un analizador de ficheros CSS. Así pues,
nuestro código es capaz de reconocer la sintaxis de este lenguaje y actuar en
consecuencia. Como se puede ver en el apartado anterior, esta memoria está
dividida en seis partes: una introducción, un manual de usuario donde se detallan
los pasos para ejecutar el código y otros detalles de interés, un manual técnico,
donde se explica un poco más en profundidad el código en sí, y para rematar, los
apartados de trabajo a futuro, incidentes y conclusión.
##################################################################################
2.) MANUAL DE USUARIO

Para facilitar la ejecución de nuestro código se ha creado un fichero makefile,
así como un archivo de ejemplo ("prueba.css"), y múltiples ficheros de errores
("error1.css"), con los que testar el correcto funcionamiento del programa.

Para ser ejecutado, basta con escribir en un terminal las siguientes instrucciones:
				make
				make test
Con estas lineas de código, se ejecutara el programa y se probará con el archivo 
"prueba.css" por defecto.
##################################################################################
3.) MANUAL TÉCNICO

Este apartado se ha divido en dos subcategorías, donde se entrará un poco más en
detalle de la implementación del código en sí.

3.1) ANALIZADOR LÉXICO

En este sección, explicaremos el archivo "analizador.l". De todas maneras, cabe
resaltar que se han hecho numerosos comentarios en el código para facilitar así
su lectura. En primer lugar, en la sección de declaraciones, todas las 
definiciones estan acompañadas de un nombre bastante clarificativo. Destacar el
manejo de los espacios y saltos de linea ("ws"). Nos decidimos por reconocerlos
en nuestro analizador léxico para tener una gramática más sencilla.

Nuestra sección de reglas es de sencilla comprensión ya que la mayoría de las 
definiciones devuelven al analizador sintáctico un token con su nombre. En algunos
casos sensibles, como "comment", simplemente se suma uno a una varible para llevar
cuenta del numero de comentarios. En otros casos como "std_name" o "class", se
guardan el nombre de la clase, subclase, etc para poder acceder a él después en
las estadísticas.

3.2) ANALIZADOR SINTÁCTICO

En este apartado, nos centramos en el archivo "analizador.y". Cabe destacar que al
igual que con "analizador.l", creemos que el código esta bien comentado, y las 
variables y funciones tienen nombres claros para facilitar su comprensión.

En primer lugar, definimos varios tipos de estructuras para trabajar con los
selectores más facilmente, "Selector_Map_Info" y "Selector_Map_Node", así como con
las propiedades, con estructuras casi homónimas. En "Selector_Map_Info" almacenamos
el nombre del selector, la frecuencia, las lineas donde aparece y el número de 
estas. En "Selector_Map_Node" se almacena una estructura de datos como la 
anteriormente comentada y un puntero al siguiente nodo. "Property_Map_Info" y
"Property_Map_Node" son iguales, a excepción de la adición de la variable "child_of",
que controla de que selector es hija la propiedad. De esta forma, se puede saber
si se pueden sobreescribir los datos del hashmap de las propiedades, ahorrándonos
tener que borrar todos los datos del hashmap de propiedades antes de seguir al 
siguiente selector. Posteriormente, se crea un Hash map de cada estructura para
poder recorrerlas de manera óptima.

En la sección de reglas gramaticales, empezamos con un css y lo vamos descomponiendo
en los distintos atributos que puede tener. Así pues, cuando se detecta un fallo en 
la sintaxis, se aborta la ejecución y se printea una explicación detallada que
facilita encontrar el error dentro del código css. Es interesante mencionar también
que en la parte de "selector_name" se obtiene el nombre del selector, se eliminan
los espacios en blanco no necesarios con la función "sanitize_nested_element" y se
añade este selector al Hash map, aumentando la cuenta de selectores totales y las 
estadísticas propias dependiendo del caso.

Por último, en el apartado de cógido, destacar las funciones "sanitize_nested_element",
que se encarga de eliminar los espacios en blanco menos los estrictamente necesarios
("class espacio .anotherclass"), "create_selector_info" y "add_selector", que se
encargan del manejo de los selectores en el Hash map. El primero para crear un nuevo
nodo desde cero y el segundo para hacer las comprobaciones al añadir uno, y si ya
estaba creado, simplemente actualizar los valores pertinentes. Algo similar ocurre
con las funciones "create_property_info" y "add_property". Por último encontramos 
las funciones para liberar memoria y recorrer ambos Hash maps.
##################################################################################
4.) TRABAJO A FUTURO

Una de las características que más nos atrajo de la idea de hacer esta práctica 
es que tiene tantos niveles de complejidad como se precise darle. Actualmente,
el programa sirve como analizador de estadísticas de un archivo CSS, pero dado que
nuestro código es capaz de reconocer la sintaxis propia de este lenguaje, podría
tener multiples utilidades, según lo que se quisiera medir. Como ejemplo de esto, 
se ha desarrollado la funcionalidad de ver que el fichero estuviese bien escrito y 
señalar en que linea no se respeta la sintaxis.
##################################################################################
5.) INCIDENTES

En este apartado cabe destacar las diferentes elecciones técnicas con las que
hemos tenido que lidiar para correcto desarrollo de esta práctica. Entre ellas 
destacan por ejemplo la problemática con los espacios en blanco o el manejo
de los selectores y propiedades, decantándonos finalmente por hacer un Hash map,
gracias a su rapidez y eficiencia al manejar las estructuras que quisimos implementar.
##################################################################################
6.) CONCLUSIÓN	

Para rematar, nos gustaría  resaltar nuestra satisfacción con la práctica 
entregada, habiendo elegido un tema relacionado con la materia vista en las clases
prácticas pero con un nivel de complejidad y detalle que pudiese aumentar según lo
requerido. Así pues, estamos contentos con los conocimientos adquiridos, así 
como con nuestro desempeño en el desarrollo.
##################################################################################
##################################################################################
